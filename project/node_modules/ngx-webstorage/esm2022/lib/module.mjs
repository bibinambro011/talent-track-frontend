import { APP_INITIALIZER, Inject, InjectionToken, NgModule, Optional } from '@angular/core';
import { LocalStorageProvider, SessionStorageProvider } from './core/nativeStorage';
import { Services } from './services/index';
import { Strategies } from './strategies/index';
import { StrategyIndex } from './services/strategyIndex';
import { StorageKeyManager } from './helpers/storageKeyManager';
import * as i0 from "@angular/core";
import * as i1 from "./services/strategyIndex";
export const LIB_CONFIG = new InjectionToken('ngx_webstorage_config');
export function appInit(index) {
    index.indexStrategies();
    return () => {
        return StrategyIndex.index;
    };
}
class NgxWebstorageModule {
    constructor(index, config) {
        if (config)
            StorageKeyManager.consumeConfiguration(config);
        else
            console.error('NgxWebstorage : Possible misconfiguration (The forRoot method usage is mandatory since the 3.0.0)');
    }
    static forRoot(config = {}) {
        return {
            ngModule: NgxWebstorageModule,
            providers: [
                {
                    provide: LIB_CONFIG,
                    useValue: config,
                },
                LocalStorageProvider,
                SessionStorageProvider,
                ...Services,
                ...Strategies,
                {
                    provide: APP_INITIALIZER,
                    useFactory: appInit,
                    deps: [StrategyIndex],
                    multi: true
                }
            ]
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.3", ngImport: i0, type: NgxWebstorageModule, deps: [{ token: i1.StrategyIndex }, { token: LIB_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.0.3", ngImport: i0, type: NgxWebstorageModule }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.0.3", ngImport: i0, type: NgxWebstorageModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.3", ngImport: i0, type: NgxWebstorageModule, decorators: [{
            type: NgModule,
            args: [{}]
        }], ctorParameters: () => [{ type: i1.StrategyIndex }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [LIB_CONFIG]
                }] }] });
export { NgxWebstorageModule };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXdlYnN0b3JhZ2Uvc3JjL2xpYi9tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLGVBQWUsRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUF1QixRQUFRLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQy9HLE9BQU8sRUFBQyxvQkFBb0IsRUFBRSxzQkFBc0IsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ2xGLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUMxQyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFDOUMsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBRXZELE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLDZCQUE2QixDQUFDOzs7QUFHOUQsTUFBTSxDQUFDLE1BQU0sVUFBVSxHQUErQyxJQUFJLGNBQWMsQ0FBNkIsdUJBQXVCLENBQUMsQ0FBQztBQUU5SSxNQUFNLFVBQVUsT0FBTyxDQUFDLEtBQW9CO0lBQzNDLEtBQUssQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN4QixPQUFPLEdBQTZDLEVBQUU7UUFDckQsT0FBTyxhQUFhLENBQUMsS0FBSyxDQUFDO0lBQzVCLENBQUMsQ0FBQztBQUNILENBQUM7QUFFRCxNQUNNLG1CQUFtQjtJQUV4QixZQUFZLEtBQW9CLEVBQWtDLE1BQWtDO1FBQ25HLElBQUksTUFBTTtZQUFFLGlCQUFpQixDQUFDLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxDQUFDOztZQUN0RCxPQUFPLENBQUMsS0FBSyxDQUFDLG1HQUFtRyxDQUFDLENBQUM7SUFDekgsQ0FBQztJQUVELE1BQU0sQ0FBQyxPQUFPLENBQUMsU0FBcUMsRUFBRTtRQUNyRCxPQUFPO1lBQ04sUUFBUSxFQUFFLG1CQUFtQjtZQUM3QixTQUFTLEVBQUU7Z0JBQ1Y7b0JBQ0MsT0FBTyxFQUFFLFVBQVU7b0JBQ25CLFFBQVEsRUFBRSxNQUFNO2lCQUNoQjtnQkFDRCxvQkFBb0I7Z0JBQ3BCLHNCQUFzQjtnQkFDdEIsR0FBRyxRQUFRO2dCQUNYLEdBQUcsVUFBVTtnQkFDYjtvQkFDQyxPQUFPLEVBQUUsZUFBZTtvQkFDeEIsVUFBVSxFQUFFLE9BQU87b0JBQ25CLElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQztvQkFDckIsS0FBSyxFQUFFLElBQUk7aUJBQ1g7YUFDRDtTQUNELENBQUM7SUFDSCxDQUFDOzhHQTNCSSxtQkFBbUIsK0NBRThCLFVBQVU7K0dBRjNELG1CQUFtQjsrR0FBbkIsbUJBQW1COzsyRkFBbkIsbUJBQW1CO2tCQUR4QixRQUFRO21CQUFDLEVBQUU7OzBCQUd3QixRQUFROzswQkFBSSxNQUFNOzJCQUFDLFVBQVU7O0FBNkJqRSxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QVBQX0lOSVRJQUxJWkVSLCBJbmplY3QsIEluamVjdGlvblRva2VuLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSwgT3B0aW9uYWx9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtMb2NhbFN0b3JhZ2VQcm92aWRlciwgU2Vzc2lvblN0b3JhZ2VQcm92aWRlcn0gZnJvbSAnLi9jb3JlL25hdGl2ZVN0b3JhZ2UnO1xuaW1wb3J0IHtTZXJ2aWNlc30gZnJvbSAnLi9zZXJ2aWNlcy9pbmRleCc7XG5pbXBvcnQge1N0cmF0ZWdpZXN9IGZyb20gJy4vc3RyYXRlZ2llcy9pbmRleCc7XG5pbXBvcnQge1N0cmF0ZWd5SW5kZXh9IGZyb20gJy4vc2VydmljZXMvc3RyYXRlZ3lJbmRleCc7XG5pbXBvcnQge05neFdlYnN0b3JhZ2VDb25maWd1cmF0aW9ufSBmcm9tICcuL2NvbmZpZyc7XG5pbXBvcnQge1N0b3JhZ2VLZXlNYW5hZ2VyfSBmcm9tICcuL2hlbHBlcnMvc3RvcmFnZUtleU1hbmFnZXInO1xuaW1wb3J0IHtTdG9yYWdlU3RyYXRlZ3l9IGZyb20gJy4vY29yZS9pbnRlcmZhY2VzL3N0b3JhZ2VTdHJhdGVneSc7XG5cbmV4cG9ydCBjb25zdCBMSUJfQ09ORklHOiBJbmplY3Rpb25Ub2tlbjxOZ3hXZWJzdG9yYWdlQ29uZmlndXJhdGlvbj4gPSBuZXcgSW5qZWN0aW9uVG9rZW48Tmd4V2Vic3RvcmFnZUNvbmZpZ3VyYXRpb24+KCduZ3hfd2Vic3RvcmFnZV9jb25maWcnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGFwcEluaXQoaW5kZXg6IFN0cmF0ZWd5SW5kZXgpIHtcblx0aW5kZXguaW5kZXhTdHJhdGVnaWVzKCk7XG5cdHJldHVybiAoKTogeyBbbmFtZTogc3RyaW5nXTogU3RvcmFnZVN0cmF0ZWd5PGFueT4gfSA9PiB7XG5cdFx0cmV0dXJuIFN0cmF0ZWd5SW5kZXguaW5kZXg7XG5cdH07XG59XG5cbkBOZ01vZHVsZSh7fSlcbmNsYXNzIE5neFdlYnN0b3JhZ2VNb2R1bGUge1xuXG5cdGNvbnN0cnVjdG9yKGluZGV4OiBTdHJhdGVneUluZGV4LCBAT3B0aW9uYWwoKSBASW5qZWN0KExJQl9DT05GSUcpIGNvbmZpZzogTmd4V2Vic3RvcmFnZUNvbmZpZ3VyYXRpb24pIHtcblx0XHRpZiAoY29uZmlnKSBTdG9yYWdlS2V5TWFuYWdlci5jb25zdW1lQ29uZmlndXJhdGlvbihjb25maWcpO1xuXHRcdGVsc2UgY29uc29sZS5lcnJvcignTmd4V2Vic3RvcmFnZSA6IFBvc3NpYmxlIG1pc2NvbmZpZ3VyYXRpb24gKFRoZSBmb3JSb290IG1ldGhvZCB1c2FnZSBpcyBtYW5kYXRvcnkgc2luY2UgdGhlIDMuMC4wKScpO1xuXHR9XG5cblx0c3RhdGljIGZvclJvb3QoY29uZmlnOiBOZ3hXZWJzdG9yYWdlQ29uZmlndXJhdGlvbiA9IHt9KTogTW9kdWxlV2l0aFByb3ZpZGVyczxOZ3hXZWJzdG9yYWdlTW9kdWxlPiB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdG5nTW9kdWxlOiBOZ3hXZWJzdG9yYWdlTW9kdWxlLFxuXHRcdFx0cHJvdmlkZXJzOiBbXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRwcm92aWRlOiBMSUJfQ09ORklHLFxuXHRcdFx0XHRcdHVzZVZhbHVlOiBjb25maWcsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdExvY2FsU3RvcmFnZVByb3ZpZGVyLFxuXHRcdFx0XHRTZXNzaW9uU3RvcmFnZVByb3ZpZGVyLFxuXHRcdFx0XHQuLi5TZXJ2aWNlcyxcblx0XHRcdFx0Li4uU3RyYXRlZ2llcyxcblx0XHRcdFx0e1xuXHRcdFx0XHRcdHByb3ZpZGU6IEFQUF9JTklUSUFMSVpFUixcblx0XHRcdFx0XHR1c2VGYWN0b3J5OiBhcHBJbml0LFxuXHRcdFx0XHRcdGRlcHM6IFtTdHJhdGVneUluZGV4XSxcblx0XHRcdFx0XHRtdWx0aTogdHJ1ZVxuXHRcdFx0XHR9XG5cdFx0XHRdXG5cdFx0fTtcblx0fVxuXG59XG5cbmV4cG9ydCB7Tmd4V2Vic3RvcmFnZU1vZHVsZX07XG4iXX0=